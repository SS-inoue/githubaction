# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ 'releases/v[0-9]+.[0-9]+.[0-9]+' ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Copy Files
        run: cp -pR src/. dist/

      # Runs a set of commands using the runners shell
      - name: ls
        run: |
          ls -a

      - name: Zip output
        run: |
          cd dist
          zip release *.*

      # Runs a set of commands using the runners shell
      - name: ls
        run: |
          ls -a dist

      - name: Tag
        uses: butlerlogic/action-autotag@stable
        id: autotagger
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          tag_prefix: "v"

      - name: Create Release
        id: create_release
        if: steps.autotagger.outputs.tagname != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.autotagger.outputs.tagname }}
          release_name: Version ${{ steps.autotagger.outputs.version }}
          body: ${{ steps.autotagger.outputs.tagmessage }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        if: steps.autotagger.outputs.tagname != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/release.zip
          asset_name: dist-"${{ steps.autotagger.outputs.tagname }}".zip
          asset_content_type: application/zip
